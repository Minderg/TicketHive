@page "/admin/addevent"
@using Microsoft.AspNetCore.Authorization;
@using TicketHiveSpaceKittens.Client.Pages
@using TicketHiveSpaceKittens.Client.Services;
@using TicketHiveSpaceKittens.Shared.Models
@attribute [Authorize(Roles = "Admin")]
@inject IEventService service;
@inject NavigationManager navManager;


<div class="card mt-5" style="background-color:#305076">
    <div class="card-body">
        <h2 class="text-center" style="color:#fbe89c"><b>Create a New Event</b></h2>
    </div>
</div>

<div class="container mt-2" style="background-color:#fbe89c">
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label for="name">Name:</label>
                <input type="text" class="form-control" id="name" @bind="@newEvent.Name" />
                @if (string.IsNullOrEmpty(newEvent.Name))
                {
                        <span class="text-danger">The event name is required!</span>
                }
            </div>
            <div class="form-group">
                <label for="location">Location:</label>
                <input type="text" class="form-control" id="location" @bind="@newEvent.Location" />
            </div>
            <div class="form-group">
                <label for="description">Description:</label>
                <textarea class="form-control" id="description" rows="5" @bind="@newEvent.Description"></textarea>
            </div>
            <div class="form-group">
                <label for="ticketPrice">Ticket Price:</label>
                <input type="number" class="form-control" id="ticketPrice" step="0.01" @bind="@newEvent.TicketPrice" />
            </div>
        </div>
        <div class="col-md-6">          
            <div class="form-group">
                <label for="eventDate">Event Date:</label>
                <input type="date" class="form-control" id="eventDate" @bind="@newEvent.EventDate" />
            </div>
            <div class="form-group">
                <label for="capacity">Number of tickets:</label>
                <input type="number" class="form-control" id="capacity" @bind="@newEvent.TicketsRemaining" />
            </div>
            <div class="form-group">
                <label for="eventTag">Event Tag:</label>
                <input type="text" class="form-control" id="eventTag" @bind="@TagInput" />
                <button class="btn btn-primary mt-2" @onclick="AddTag">Add Tag</button>
                <ul>
                    @foreach (var tag in newEvent.Tags)
                    {
                            <li>@tag.TagName</li>
                    }
                </ul>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-center">
            <!-------------------------------------The Button and add confirm dialog--------------------------------------------------->

            <ConfirmationDialog Title="Add Event"
                                Class="btn btn-psl-add mt-2"
                                Message="Add this event?"
                                YesCssClass="btn-yes btn-success"
                                NoCssClass="btn-no btn-danger"                               
                                ConfirmedChanged="@(async (bool confirmed) => await AddConfirmed(confirmed))">
                <ButtonContent>
                    <button type="submit" class="btn btn-primary">
                        <i class="fa fa-plus"></i> Add Event
                    </button>
                </ButtonContent>
                <MessageTemplate>
                    <div class="card border-primary pop-message-card">
                        <div class="card-header bg-primary text-white">Add Event?</div>
                        <div class="card-body">
                            <p>
                                This will create the event!<br />
                                Are you sure?
                            </p>
                        </div>
                    </div>
                </MessageTemplate>
            </ConfirmationDialog>
        </div>
    </div>
</div>

@code {


    /// <summary>
    /// Property is set by the parent component, the parent will be notified when a new element is added
    /// </summary>
    [Parameter]
    public EventModel NewEvent { get; set; }
    [Parameter]
    public EventCallback<EventModel> OnEventAdded { get; set; }

    public string? TagInput { get; set; }
    public EventModel newEvent = new();

    /// <summary>
    ///  Adds a new tag to the list of tags for a given event.
    ///  If the TagInput property is not null or empty, a new TagModel object will be created and added to the list of tags for the event.
    ///  The TagName property of the new tag will be set to the value of the TagInput property, and the TagInput property will be cleared.
    /// </summary>

    public void AddTag()
    {
        if (!string.IsNullOrEmpty(TagInput))
        {
            newEvent.Tags.Add(new TagModel { TagName = TagInput });
            TagInput = "";
        }
    }

    /// <summary>
    /// If the confirmed parameter <param name="confirmed"></param> is true and the Name property of the new event is not null or empty, the AddEvent method will be called to add the new event to the database.
    /// </summary>

    private async Task AddConfirmed(bool confirmed)
    {
        if (confirmed && !string.IsNullOrEmpty(newEvent.Name))
        {
            await AddEvent();
        }
    }

    /// <summary>
    /// Creates a new event using the service's CreateEventAsync method. OnEventAdded is a callback method  that is raised when an event is added.
    /// </summary>
    /// <returns></returns>

    private async Task AddEvent()
    {
        await service.CreateEventAsync(newEvent);
        await OnEventAdded.InvokeAsync(newEvent);
        navManager.NavigateTo("admin");
    }
}

