@page "/booking"
@page "/booking/{searchText}"
@using Microsoft.AspNetCore.Authorization;
@using TicketHiveSpaceKittens.Client.Services;
@using TicketHiveSpaceKittens.Shared.Models;
@inject IEventService service
@attribute [Authorize]


<div class="row">
    <div class="row sticky-top mb-1 mt-5">
        <div class="col-md-8 mt-1"><h3 class="text-muted" style="font-family:'Javanese Text'">Events</h3></div>


        <div class=" roz mt-5">
            <input type="text" @bind-value="@searchText" @oninput="@FilterEvents" />
            <button @onclick="SortByPrice">Price</button>
            <button @onclick="SortByDate">Date</button>
        </div>

    </div>

    @if (filteredEvents != null)
    {
        foreach (var e in filteredEvents)
        {
            if (e.TicketsRemaining > 0)
            {

                <div class="col-md-3">
                    <div class="card border-1 m-2 mb-2">
                        <div class="card-header text-center">
                            <img class="card-img-top" src="/Images/Event images/image 1.jpg" style="width:200px; height:150px" />
                        </div>
                        <div class="card-body">
                            <h5 class="card-title"><strong>@e.Name:</strong></h5>
                            <span class="card-text font-weight-bold"><strong>Description:</strong> @e.Description</span>
                            <span class="card-text font-weight-bold"><strong>Location:</strong> @e.Location</span>
                            <span class="card-text font-weight-bold"><strong>TicketPrice:</strong> @e.TicketPrice</span><br>
                            <span class="card-text font-weight-bold"><strong>Events date:</strong> @e.EventDate</span><br>
                            <a href="/Cart" class="btn btn-primary mt-3">Add To Card</a>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="col-md-3">
                    <div class="card border-1 m-2 mb-2">
                        <div class="card-header text-center">
                            <img src="/Images/Event images/@e.ImageUrl" style="width:200px; height:150px;" />
                        </div>
                        <div class="card-body">
                            <h5 class="card-title"><strong>@e.Name:</strong></h5>
                            <span class="card-text font-weight-bold"><strong>Description:</strong> @e.Description</span>
                            <span class="card-text font-weight-bold"><strong>Location:</strong> @e.Location</span>
                            <span class="card-text font-weight-bold"><strong>TicketPrice:</strong> @e.TicketPrice</span><br>
                            <span class="card-text font-weight-bold"><strong>Events date:</strong> @e.EventDate</span><br>
                            <a href="/Cart" class="btn btn-primary mt-3">Add To Card</a>
                        </div>
                    </div>
                </div>
            }
        }
    }
</div>

@code
{
    private List<EventModel>? allEvents = new();
    private List<EventModel>? filteredEvents = new();
    [Parameter]
    public string searchText { get; set; }
    private bool isCheapestFirst = true;

    protected override async Task OnInitializedAsync()
    {
        await GetEvents();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (searchText != null)
        {
            filteredEvents = allEvents.Where(e => e.Name!.ToLower().Contains(searchText.ToLower())).ToList();
        }
    }

    private async Task GetEvents()
    {
        allEvents = await service.GetEventsAsync();
        filteredEvents = allEvents;
    }


    private void FilterEvents(ChangeEventArgs e)
    {
        filteredEvents = allEvents!.Where(ev => ev.Name!.ToLower().Contains(e.Value!.ToString())).ToList();
    }

    private void SortByPrice()
    {
        List<EventModel> sortedList;
        if (isCheapestFirst)
            sortedList = filteredEvents.OrderBy(e => e.TicketPrice).ToList();
        else
            sortedList = filteredEvents.OrderByDescending(e => e.TicketPrice).ToList();
        filteredEvents = sortedList;
        isCheapestFirst = !isCheapestFirst;
    }
    private void SortByDate()
    {
        List<EventModel> sortedList;
        if (isCheapestFirst)
            sortedList = filteredEvents.OrderBy(e => e.EventDate).ToList();
        else
            sortedList = filteredEvents.OrderByDescending(e => e.EventDate).ToList();
        filteredEvents = sortedList;
        isCheapestFirst = !isCheapestFirst;
    }

}
