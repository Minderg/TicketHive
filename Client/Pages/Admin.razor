@page "/admin"
@using Microsoft.AspNetCore.Authorization;
@using TicketHiveSpaceKittens.Client.Services;
@using TicketHiveSpaceKittens.Shared.Models;
@attribute [Authorize(Roles = "Admin")]
@inject IEventService service
@inject NavigationManager navManager
@inject IModalService modal


<style>
    .table-title {
        background: #fbe89c;
        color: #305076;
        padding: 15px 30px;
        border-radius: 3px 3px 0 0;
    }
</style>


<div class="container-xl shadow">
    <div class="table-responsive">
        <div class="table-wrapper">
    <!-----------------------------------------------Table Header--------------------------------------------------->
            <div class="table-title mt-5 shadow text-center" style="background-color: white;">
                <h1><b>Manage Events</b></h1>
                <div class="row">
                    <div class="form-group text-center">
                       
                        <h3 class="fw-bolder mt-5">Search for the event</h3>
                        <input class="form-control-lg" type="text" @bind-value="@searchText" @oninput="@FilterEvents" placeholder="Search event..." />
                        <button class="btn btn-lg btn-outline-primary" @onclick="SortByPrice">Price</button>
                        <button class="btn btn-lg btn-warning" @onclick="SortByDate">Date</button>
                        <button class="btn btn-lg btn-success" @onclick="showAddEventComponent">Add Event</button>
                        @if (showAddEvent)
                        {
                            <AddEvents OnEventAdded="HandleEventAdded" />
                            <button class="btn btn-sm btn-danger " @onclick="CloseComponent">Close Window</button>
                        }
                    </div>


                </div>
            </div>

    <!-----------------------------------------------Table body--------------------------------------------------->
            <table class="table table-striped table-hover mt-5">
                <thead>
                    <tr>

                        <th>Nr:</th>
                        <th>Name:</th>
                        <th>Description:</th>
                        <th>Location:</th>
                        <th>Date:</th>
                        <th>Price:</th>
                        <th>Image:</th>

                    </tr>
                </thead>
                

    @if (filteredEvents != null)
    {
        var count = 1;
        foreach (var e in filteredEvents)
        {

                                <tbody>
                                <tr>
                                    <td>@(count++)</td>
                                    <td>@e.Name</td>
                                    <td>@e.Description</td>
                                    <td>@e.Location</td>
                                    <td>@e.EventDate</td>
                                    <td>@e.TicketPrice</td>
                                    <td>
                                        <a href="details/@e.EventId">
                                            <img class="card-img-top" src="/Images/Event images/@e.ImageUrl" style="width:80px; height:80px" />
                                        </a>
                                    </td>
                                    <td>
                                        <ConfirmationDialog Title="Delete Event"
                                       Class="btn btn-psl-add mt-2"
                                       Message="Delete this event?"
                                       YesCssClass="btn-yes btn-success"
                                       NoCssClass="btn-no btn-danger"
                                       ConfirmedChanged="@(async (bool confirmed) => await DeleteEvent(e.EventId, confirmed))">
                                            <ButtonContent>
                                                <button type="submit" class="btn btn-lg btn-danger w-100 fs-6 fw-bolder">
                                                    <ion-icon name="trash-outline" style="color:white;"></ion-icon> Delete
                                                </button>
                                            </ButtonContent>
                                            <MessageTemplate>
                                                <div class="card border-primary pop-message-card">
                                                    <div class="card-header bg-primary text-white">Delete Event?</div>
                                                    <div class="card-body">
                                                        <p>
                                                            This will delete the event!<br />
                                                            Are you sure?
                                                        </p>
                                                    </div>
                                                </div>
                                            </MessageTemplate>
                                        </ConfirmationDialog>
                                    </td>
                                </tr>
                         </tbody>
            }
        }
            </table>
        </div>
    </div>
</div>


@code
{

    private List<EventModel>? allEvents = new();
    private List<EventModel>? filteredEvents = new();
    private ConfirmationDialog? deleteConfirmation;
    bool showAddEvent = false;
    [Parameter]
    public string? searchText { get; set; }
    private bool isCheapestFirst = true;

    protected override async Task OnInitializedAsync()
    {
        await GetEvents();
    }

    /// <summary>
    ///This method is called whenever the component's parameters change. It is responsible for updating the list of filtered events based on name parameter.
    /// If the searchText field is not null, the filteredEvents field is updated
    /// </summary>

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (searchText != null)
        {
            filteredEvents = allEvents?.Where(e => e.Name!.ToLower().Contains(searchText.ToLower())).ToList();
        }
    }
    /// <summary>
    /// This method is called when a new event is added to the database, is responsible for updating the list (adding the newly element to the list)
    /// Adding a new element is made in the AddEvent component
    /// </summary>
    /// <param name="newEvent">The EventModel object representing the newly added event.</param>
    private async Task HandleEventAdded(EventModel newEvent)
    {
        filteredEvents = await service.GetEventsAsync();
    }

    /// <summary>
    /// Retrieves a list of all events from the service and sets it as the current list of events.
    /// </summary>
    private async Task GetEvents()
    {
        allEvents = await service.GetEventsAsync();
        filteredEvents = allEvents;
    }

    /// <summary>
    /// Filters the list of events by name, depending on what the user writes in the input.
    /// </summary>
    /// <param name="e">The ChangeEventArgs object containing the user's input.</param>

    private void FilterEvents(ChangeEventArgs e)
    {
        filteredEvents = allEvents!.Where(ev => ev.Name!.ToLower().Contains(e.Value!.ToString())).ToList();
    }

    /// <summary>
    /// Sorts the list of events by ticket price, in ascending or descending order.
    /// If the list is currently sorted in ascending order, it will be sorted in descending order, and vice versa.
    /// </summary>

    private void SortByPrice()
    {
        List<EventModel> sortedList;
        if (isCheapestFirst)
            sortedList = filteredEvents.OrderBy(e => e.TicketPrice).ToList();
        else
            sortedList = filteredEvents.OrderByDescending(e => e.TicketPrice).ToList();
        filteredEvents = sortedList;
        isCheapestFirst = !isCheapestFirst;
    }
    /// <summary>
    /// Sorts the list of events by date, in ascending or descending order.
    /// </summary>

    private void SortByDate()
    {
        List<EventModel> sortedList;
        if (isCheapestFirst)
            sortedList = filteredEvents.OrderBy(e => e.EventDate).ToList();
        else
            sortedList = filteredEvents.OrderByDescending(e => e.EventDate).ToList();
        filteredEvents = sortedList;
        isCheapestFirst = !isCheapestFirst;
    }
    /// <summary>
    /// Deletes an event with the specified ID, if the user confirms the action by confirmation button.
    /// If the user confirms the deletion, the method calls the service to delete the event from the database
    /// and list of events will be updated.
    /// </summary>
    /// <param name="eventId">The ID of the event to delete.</param>
    /// <param name="isConfirmed">Indicating if the user has confirmed the deletion.</param>

    private async Task DeleteEvent(int eventId, bool isConfirmed)
    {
        if (isConfirmed)
        {
            await service.DeleteEventByIdAsync(eventId);
            await GetEvents();
        }
    }

    /// <summary>
    /// Closes the "Add Event" component.
    /// </summary>
    private void showAddEventComponent()
    {
        showAddEvent = !showAddEvent;
    }

    private void CloseComponent()
    {
        showAddEvent = false;
    }
}


