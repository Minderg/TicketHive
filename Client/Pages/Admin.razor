@page "/admin"
@using Microsoft.AspNetCore.Authorization;
@using TicketHiveSpaceKittens.Client.Services;
@using TicketHiveSpaceKittens.Shared.Models;
@attribute [Authorize (Roles = "Admin")]
@inject IEventService service
@inject NavigationManager navManager

<h1>Admin page</h1>

<a href="@navManager.ToBaseRelativePath("admin/addevent")">Add Event</a>


<div class="container mt-5 shadow-lg">
    <div class="row">
        <div class="col-md-12">
            <BSCarousel>
                @if (events != null)
                {
                    @foreach (var e in events)
                    {
                        if (e.TicketsRemaining > 0)
                        {
                            <BSCarouselItem Active="item == events.First()">
                                <div class="row">
                                    <div class=" col-md-6">
                                        <div class="event-image mb-3 mt-3">
                                            <img class=" img-fluid " src="/Images/Event images/@e.ImageUrl" alt="eventImg">
                                        </div>
                                    </div>

                                    <div class="col-md-6 p-5">
                                        <h3 class="fw-bolder">@e.Name</h3>
                                        <hr>
                                        <p>@e.Description</p>
                                        <p><strong>Date:</strong> @e.EventDate</p>

                                        <a href="details/@e.EventId" class="btn btn-lg btn-warning w-100 fs-6 fw-bolder">See more info</a>
                                        <!-----------------------------------------Delete button calling the DeleteConfirmation------------------------------------->
                                        <button type="button" class="btn btn-lg btn-danger w-100 fs-6 fw-bolder" @onclick="() => deleteConfirmation.ShowPop()">Delete</button>

                                        <ConfirmationDialog Title="Delete Event" 
                                                Class="btn btn-psl-delete"
                                                Message="Are you sure you want to delete this event?"
                                                YesCssClass="btn-yes"
                                                NoCssClass="btn-no"
                                                ConfirmedChanged="@EventCallback.Factory.Create(this, async (bool isConfirmed) => await DeleteEvent(e.EventId, isConfirmed))"
                                                @*ConfirmedChanged="DeleteEvent"*@>
                                                <ButtonContent>
                                                      <ion-icon name="trash-outline" style="font-size:2em;color:white;"></ion-icon>
                                                </ButtonContent>
                                                <MessageTemplate>
                                                    <div class="card pop-message-card">
                                                          <div class="card-header">Delete Event?</div>
                                                          <div class="card-body">
                                                        <p>
                                                            This will delete the record!<br />
                                                            Are you sure?
                                                        </p>
                                                          </div>
                                                    </div>
                                                </MessageTemplate>
                                        </ConfirmationDialog>
                                    </div>
                                </div>
                            </BSCarouselItem>
                        }
                    }
                }
            </BSCarousel>
        </div>
    </div>
</div>

@code {
    private List<EventModel> events;

    private ConfirmationDialog deleteConfirmation;

    protected override async Task OnInitializedAsync()
    {
        events = await service.GetEventsAsync();
    }

    private async Task DeleteEvent(int eventId, bool isConfirmed)
    {
        if (isConfirmed)
        {
            // Here you can implement the code to delete the event
            // For example: await service.DeleteEvent(eventId);
            await service.DeleteEventByIdAsync(eventId);
        }
    }
}