// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketHiveSpaceKittens.Server.Data;

#nullable disable

namespace TicketHiveSpaceKittens.Server.Migrations
{
    [DbContext(typeof(EventDbContext))]
    [Migration("20230404092744_AddingExtendedUsers")]
    partial class AddingExtendedUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventModelEventTypesModel", b =>
                {
                    b.Property<string>("EventTypesTypeName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EventsId")
                        .HasColumnType("int");

                    b.HasKey("EventTypesTypeName", "EventsId");

                    b.HasIndex("EventsId");

                    b.ToTable("EventModelEventTypesModel");
                });

            modelBuilder.Entity("TicketHiveSpaceKittens.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("EventModelId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventModelId");

                    b.ToTable("ApplicationUser");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TicketHiveSpaceKittens.Shared.Models.EventModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtendedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TicketsRemaining")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExtendedUserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("TicketHiveSpaceKittens.Shared.Models.EventTypesModel", b =>
                {
                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TypeName");

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("TicketHiveSpaceKittens.Server.Models.ExtendedUser", b =>
                {
                    b.HasBaseType("TicketHiveSpaceKittens.Server.Models.ApplicationUser");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ExtendedUser");
                });

            modelBuilder.Entity("EventModelEventTypesModel", b =>
                {
                    b.HasOne("TicketHiveSpaceKittens.Shared.Models.EventTypesModel", null)
                        .WithMany()
                        .HasForeignKey("EventTypesTypeName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketHiveSpaceKittens.Shared.Models.EventModel", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketHiveSpaceKittens.Server.Models.ApplicationUser", b =>
                {
                    b.HasOne("TicketHiveSpaceKittens.Shared.Models.EventModel", null)
                        .WithMany("Users")
                        .HasForeignKey("EventModelId");
                });

            modelBuilder.Entity("TicketHiveSpaceKittens.Shared.Models.EventModel", b =>
                {
                    b.HasOne("TicketHiveSpaceKittens.Server.Models.ExtendedUser", null)
                        .WithMany("Events")
                        .HasForeignKey("ExtendedUserId");
                });

            modelBuilder.Entity("TicketHiveSpaceKittens.Shared.Models.EventModel", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TicketHiveSpaceKittens.Server.Models.ExtendedUser", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
